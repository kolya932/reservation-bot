import telebot
import os
import sqlite3
from dotenv import load_dotenv
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

load_dotenv()
bot = telebot.TeleBot(os.getenv("BOT_TOKEN"))
user_data = {}

# –ë–î
conn = sqlite3.connect('bookings.db', check_same_thread=False)
c = conn.cursor()
c.execute('''
    CREATE TABLE IF NOT EXISTS bookings (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        chat_id INTEGER,
        name TEXT,
        people INTEGER,
        date TEXT,
        time TEXT,
        table_number INTEGER
    )
''')
conn.commit()

MAX_TABLES = 10

# –ú–µ–Ω—é
def main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üìÖ –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫")
    markup.add("üîç –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è")
    markup.add("üè† –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–∞–∫–ª–∞–¥")
    markup.add("üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏", "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å")
    return markup

def cancel_button():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å")
    return markup

@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Å—Ç–æ–ª–∏–∫—ñ–≤. –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∏–∂—á–µ üëá", reply_markup=main_menu())

@bot.message_handler(func=lambda m: m.text == "üìÖ –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫")
def handle_booking(message):
    chat_id = message.chat.id
    user_data[chat_id] = {}
    bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤–Ω–µ –ü–Ü–ë:", reply_markup=cancel_button())
    bot.register_next_step_handler(message, get_name)

def get_name(message):
    if message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å":
        return cancel_booking(message)
    elif message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return start_message(message)

    chat_id = message.chat.id
    user_data[chat_id]["name"] = message.text
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("1", "2", "3", "4", "5+")
    markup.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å")
    bot.send_message(chat_id, "–ù–∞ —Å–∫—ñ–ª—å–∫–∏ –æ—Å—ñ–± –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è?", reply_markup=markup)
    bot.register_next_step_handler(message, get_people)

def get_people(message):
    if message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å":
        return cancel_booking(message)
    elif message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return handle_booking(message)

    chat_id = message.chat.id
    try:
        user_data[chat_id]["people"] = int(message.text.replace("+", ""))
        bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É (—É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú):", reply_markup=cancel_button())
        bot.register_next_step_handler(message, get_date)
    except:
        bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ")
        bot.register_next_step_handler(message, get_people)

def get_date(message):
    if message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å":
        return cancel_booking(message)
    elif message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return get_name(message)

    chat_id = message.chat.id
    user_data[chat_id]["date"] = message.text
    bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å —á–∞—Å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 18:00):", reply_markup=cancel_button())
    bot.register_next_step_handler(message, get_time)

def get_time(message):
    if message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å":
        return cancel_booking(message)
    elif message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return get_people(message)

    chat_id = message.chat.id
    time = message.text
    date = user_data[chat_id]["date"]

    c.execute("SELECT COUNT(*) FROM bookings WHERE date = ? AND time = ?", (date, time))
    count = c.fetchone()[0]

    if count >= MAX_TABLES:
        bot.send_message(chat_id, "‚õî –£ —Ü–µ–π —á–∞—Å –≤–∂–µ –≤—Å—ñ —Å—Ç–æ–ª–∏–∫–∏ –∑–∞–π–Ω—è—Ç—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π —á–∞—Å –∞–±–æ –¥–∞—Ç—É.", reply_markup=main_menu())
        return

    table_number = count + 1
    user_data[chat_id]["time"] = time
    user_data[chat_id]["table_number"] = table_number

    c.execute("INSERT INTO bookings (chat_id, name, people, date, time, table_number) VALUES (?, ?, ?, ?, ?, ?)",
              (chat_id, user_data[chat_id]["name"], user_data[chat_id]["people"], date, time, table_number))
    conn.commit()

    bot.send_message(chat_id, f"‚úÖ –°—Ç–æ–ª–∏–∫ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–æ –Ω–∞ {date} –æ {time}. –ù–æ–º–µ—Ä —Å—Ç–æ–ª–∏–∫–∞: {table_number}", reply_markup=main_menu())
    user_data.pop(chat_id, None)

@bot.message_handler(func=lambda m: m.text == "üîç –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è")
def view_bookings(message):
    chat_id = message.chat.id
    c.execute("SELECT name, date, time, table_number FROM bookings WHERE chat_id = ?", (chat_id,))
    rows = c.fetchall()
    if not rows:
        bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –±—Ä–æ–Ω—é–≤–∞–Ω—å.")
    else:
        msg = "–í–∞—à—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:\n"
        for row in rows:
            msg += f"üë§ {row[0]} | üìÖ {row[1]} | üïí {row[2]} | ‚Ññ —Å—Ç–æ–ª–∏–∫–∞: {row[3]}\n"
        bot.send_message(chat_id, msg)

@bot.message_handler(func=lambda m: m.text == "üè† –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–∞–∫–ª–∞–¥")
def about_place(message):
    bot.send_message(message.chat.id, "–ù–∞—à –∑–∞–∫–ª–∞–¥ –ø—Ä–∞—Ü—é—î —â–æ–¥–Ω—è –∑ 10:00 –¥–æ 22:00. üçΩÔ∏è –ó–∞–ø—Ä–æ—à—É—î–º–æ –≤–∞—Å —Å–º–∞—á–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —á–∞—Å!")

@bot.message_handler(func=lambda m: m.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏")
def contact_info(message):
    bot.send_message(message.chat.id, "–¢–µ–ª–µ—Ñ–æ–Ω: +380000000000 \nInstagram: @our_cafe")

@bot.message_handler(func=lambda m: m.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å")
def cancel_booking(message):
    chat_id = message.chat.id
    user_data.pop(chat_id, None)
    c.execute("DELETE FROM bookings WHERE chat_id = ?", (chat_id,))
    conn.commit()
    bot.send_message(chat_id, "‚ùå –ó–∞–ø–∏—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=main_menu())

bot.polling(none_stop=True)
